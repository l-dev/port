{"version":3,"sources":["Components/Land.js","Components/Home.js","Components/Work.js","App.js","serviceWorker.js","index.js"],"names":["Land","className","href","Component","Home","src","Work","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAqBeA,G,uLAhBX,OACI,yBAAKC,UAAU,QACX,wBAAIA,UAAU,WAAd,WACA,wBAAIA,UAAU,YAAd,WACA,wBAAIA,UAAU,YAAd,WAED,gCACI,uBAAGA,UAAU,QAAQC,KAAK,6CAA1B,YACA,uBAAGD,UAAU,QAAOC,KAAK,4BAAzB,UACA,uBAAGD,UAAU,QAAOC,KAAK,yCAAzB,e,GAXIC,cC0BJC,E,iLAxBX,OACE,yBAAKH,UAAU,QACb,yBACEI,IAAI,4DACJJ,UAAU,YAGV,wBAAIA,UAAU,SACd,wBAAIA,UAAU,eAAd,kBADA,6cASI,sCAAW,uBAAGA,UAAU,QAAQC,KAAK,6CAA1B,YACV,uBAAGD,UAAU,QAAOC,KAAK,4BAAzB,UACA,uBAAGD,UAAU,QAAOC,KAAK,yCAAzB,e,GApBIC,aCqCJG,E,iLAnCX,OACE,yBAAKL,UAAU,QAEb,yBAAKA,UAAU,aACf,uBAAGC,KAAK,4CAA2C,yBAC/CD,UAAU,UACVI,IAAI,0GAGN,uBAAGH,KAAK,uCAAsC,yBAC5CD,UAAU,UACVI,IAAI,0GAEN,uBAAGH,KAAK,mDAAkD,yBACxDD,UAAU,UACVI,IAAI,0GAGN,uBAAGH,KAAK,oCAAmC,yBACzCD,UAAU,UACVI,IAAI,0GAGN,uBAAGH,KAAK,sCAAqC,yBAC3CD,UAAU,UACVI,IAAI,uJ,GA3BGF,aC0BJI,MArBf,WACE,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,OACb,uBAAGC,KAAK,KAAR,QACA,uBAAGA,KAAK,SAAR,SACA,uBAAGA,KAAK,SAAR,qBAGJ,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,QAAQC,UAAWN,IACrC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,QAAQC,UAAWJ,QCVzBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBC,SAASC,eAAe,SD0H5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ac4919ae.chunk.js","sourcesContent":["import React, {Component} from \"react\"\nimport \"./Comp.css\"\n\nclass Land extends Component {\nrender(){\n    return(\n        <div className=\"Land\">\n            <h1 className=\"welcome\">WELCOME</h1>\n            <h1 className=\"welcome2\">WELCOME</h1>\n            <h1 className=\"welcome3\">WELCOME</h1>\n           {/* <a href=\"/work\"><h1 className=\"arrow\">Projects this way &rarr; &rarr; &rarr;</h1></a>  */}\n           <footer>\n               <a className=\"links\" href=\"https://www.linkedin.com/in/laurrobinson/\">LINKEDIN</a>\n               <a className=\"links\"href=\"https://github.com/l-dev\">GITHUB</a>\n               <a className=\"links\"href=\"mailto: laurenhaleyrobinson@gmail.com\">EMAIL</a>\n           </footer>\n        </div>\n    )\n}\n}\n\nexport default Land","import React, { Component } from \"react\";\nimport \"./Comp.css\";\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"home\">\n        <img\n          src=\"https://i.paste.pics/d123c339e124a4ec80caf37b70964d62.png\"\n          className=\"profile\"\n        />\n\n          <h1 className=\"intro\">\n          <h1 className=\"intro hello\"> Hello, there!</h1>\n            My name is Lauren Robinson. I am a coffee connoisseur, an entry level sommellier, and a meticulously passionate software\n            engineer located in beautiful Boston, Massachusettes. When I am not dedicating my energy to coding or drinking copious amounts of coffee I enjoy running, playing mario kart, and networking with other software engineers! I would love to get to know you better. Click one of the links below or contact me at\n            laurenhaleyrobinson@gmail.com.\n          </h1>\n \n\n       \n              <footer>   <a className=\"links\" href=\"https://www.linkedin.com/in/laurrobinson/\">LINKEDIN</a>\n               <a className=\"links\"href=\"https://github.com/l-dev\">GITHUB</a>\n               <a className=\"links\"href=\"mailto: laurenhaleyrobinson@gmail.com\">EMAIL</a></footer>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport \"./Comp.css\";\n\nclass Work extends Component {\n  render() {\n    return (\n      <div className=\"Work\">\n\n        <div className=\"childWork\">\n        <a href=\"https://github.com/l-dev/l-dev.github.io\"><img\n            className=\"project\"\n            src=\"https://user-images.githubusercontent.com/54283215/69578614-b5992100-0f85-11ea-8466-ec4230c5b5e0.png\"\n          />\n          </a>\n          <a href=\"https://github.com/l-dev/ExpressApp\"><img\n            className=\"project\"\n            src=\"https://user-images.githubusercontent.com/54283215/66490971-014c4580-ea80-11e9-999f-364719e7b0ca.png\"\n          /></a>\n          <a href=\"https://github.com/ChrisKCarr/Pollista-FrontEnd\"><img\n            className=\"project\"\n            src=\"https://user-images.githubusercontent.com/54283215/69387058-76af5680-0c79-11ea-9d37-69fa388926e5.png\"\n          />\n          </a>\n          <a href=\"https://github.com/l-dev/bafroom\"><img\n            className=\"project\"\n            src=\"https://user-images.githubusercontent.com/54283215/69175389-87649e80-0ab8-11ea-8775-8282e9f66047.png\"\n          />\n          </a>\n          <a href=\"https://github.com/l-dev/recipeapp\"><img\n            className=\"project\"\n            src=\"https://cdn-learn.adafruit.com/assets/assets/000/049/441/medium800/circuitpython_circuit_playground_adafruit_blinka_computer.png?1513729326\"\n          />\n          </a>\n     \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Work;\n","import React from \"react\";\nimport \"./App.css\";\nimport { HashRouter, Route, Link, Switch } from \"react-router-dom\";\nimport Land from \"./Components/Land\"\nimport Home from \"./Components/Home\";\nimport Work from \"./Components/Work\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <nav className=\"nav\">\n          <a href=\"/\">HOME</a>\n          <a href=\"/home\">ABOUT</a>\n          <a href=\"/work\">PROJECTS &rarr;</a>\n        </nav>\n      </header>\n      <HashRouter>\n      <Switch>\n        <Route exact path=\"/home\" component={Home} />\n        <Route exact path=\"/\" component={Land}/>\n        <Route exact path=\"/work\" component={Work}/>\n      </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}